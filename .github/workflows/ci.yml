name: TaskForge CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
        
    - name: Run security checks with bandit
      run: |
        bandit -r taskforge/ -f json -o bandit-report.json
        bandit -r taskforge/ || exit 0  # Don't fail on security warnings
        
    - name: Run code formatting check with black
      run: |
        black --check --diff taskforge/ tests/
        
    - name: Run import sorting check with isort
      run: |
        isort --check-only --diff taskforge/ tests/
        
    - name: Run linting with flake8
      run: |
        flake8 taskforge/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run type checking with mypy
      run: |
        mypy taskforge/ --ignore-missing-imports
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # Unit and Integration Tests
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: taskforge_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: taskforge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
        
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://taskforge_test:test_password@localhost:5432/taskforge_test
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/unit/ -v --cov=taskforge --cov-report=xml --cov-report=html
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://taskforge_test:test_password@localhost:5432/taskforge_test
        REDIS_URL: redis://localhost:6379
        TASKFORGE_SECRET_KEY: test-secret-key-for-ci
      run: |
        pytest tests/integration/ -v --cov=taskforge --cov-append --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Performance and Load Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: taskforge_perf
          POSTGRES_PASSWORD: perf_password
          POSTGRES_DB: taskforge_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,all]"
        pip install locust pytest-benchmark
        
    - name: Run performance benchmarks
      env:
        DATABASE_URL: postgresql://taskforge_perf:perf_password@localhost:5432/taskforge_perf
      run: |
        pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  # Build and Test Docker Images  
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: taskforge:test
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        
    - name: Test Docker image
      run: |
        # Test that the image runs and API is accessible
        docker run -d --name taskforge-test -p 8000:8000 taskforge:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop taskforge-test
        docker rm taskforge-test
        
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Documentation Build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install mkdocs mkdocs-material mkdocstrings[python]
        
    - name: Build documentation
      run: |
        mkdocs build --strict
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/

  # Dependency Security Scan
  security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=pyproject.toml
      continue-on-error: true
        
    - name: Run Safety to check dependencies
      run: |
        python -m pip install --upgrade pip safety
        safety check --json --output safety-report.json || exit 0
        
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  # Release and Deploy
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: [quality, test, docker, docs]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        python -m twine check dist/*
        
    - name: Publish to PyPI
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*
        
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      if: github.event_name == 'release'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          taskforge/taskforge:latest
          taskforge/taskforge:${{ github.event.release.tag_name }}
        platforms: linux/amd64,linux/arm64

  # Deployment to staging/production
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying TaskForge ${{ github.event.release.tag_name }} to production"
        # Add actual deployment steps here
        # This could include:
        # - Deploying to Kubernetes
        # - Updating Helm charts
        # - Running database migrations
        # - Health checks
        # - Rollback procedures
        
  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, test, docker, docs, security]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.quality.result == 'success' && needs.test.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        # Add Slack/Discord/Email notifications here
        
    - name: Notify failure
      if: ${{ needs.quality.result == 'failure' || needs.test.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        # Add failure notifications here